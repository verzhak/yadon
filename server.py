#!/usr/bin/python3

############################################################################ 
# Базовые классы для двух серверов и для потока скачивания
############################################################################ 

# Подключение модулей стандартной библиотеки:
#
# socket - модуль, содержащий функционал управления сокетами
#
# threading (подключается под псевдонимом thr) - модуль,
#			содержащий функционал для запуска, ожидания завершения
#			и завершения потоков
#
import socket
import threading as thr

# Подключение модулей программы
from gvar import *
import config, mysql

############################################################################ 

# Базовый класс для двух серверов и для потока скачивания
class CBaseServer(thr.Thread):

	# Конструктор
	def __init__(self):

		# Двум серверам и потоку скачивания необходимо подключение
		# к локальной базе данных
		self.db = mysql.CMySQL(user = config.user, db = config.db)

		# Признак подключения узла к сети
		self.is_run = True

		# Вызов конструктора базового класса
		thr.Thread.__init__(self)

	# Деструктор (вызывается явно)
	def destroy(self):

		self.db.destroy()

	# Завершение потока
	def kill(self):

		# Признак подключения узла устанавливается в False
		self.is_run = False

		# Ожидать завершение потока
		self.join()

		# Явный вызов деструктора
		self.destroy()

############################################################################ 

# Базовый класс для двух серверов
class CListenServer(CBaseServer):

	# Конструктор
	def __init__(self, port):

		# Вызов конструктора базового класса
		CBaseServer.__init__(self)

		# Создание TCP-сокета
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

		# Сокет будет блокироваться в течении listen_socket_timeout секунд,
		# после чего операция над сокетом гарантирована будет завершена
		self.sock.settimeout(config.listen_socket_timeout)

		# Перевод сокета в слушающий режим
		self.sock.bind((config.host, port))
		self.sock.listen(10)

	# Деструктор (вызывается явно)
	def destroy(self):

		self.sock.close()
		CBaseServer.destroy(self)

############################################################################ 

